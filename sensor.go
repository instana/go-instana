// (c) Copyright IBM Corp. 2021
// (c) Copyright Instana Inc. 2020

package main

import (
	"fmt"
	"go/ast"
	"html/template"
	"os"
	"path/filepath"
	"strings"

	"golang.org/x/tools/go/ast/astutil"
)

// LookupInstanaSensor searches for the first instana.Sensor instance available in the package
// scope and returns its name
func LookupInstanaSensor(pkg *ast.Package) string {
	if n := lookupInstanaSensor(pkg.Scope); n != "" {
		return n
	}

	for _, f := range pkg.Files {
		if !astutil.UsesImport(f, SensorPackage) {
			continue
		}

		if n := lookupInstanaSensor(f.Scope); n != "" {
			return n
		}
	}

	return ""
}

func lookupInstanaSensor(sc *ast.Scope) string {
	if sc == nil {
		return ""
	}

	for _, obj := range sc.Objects {
		if obj.Kind != ast.Var {
			continue
		}

		// Is this a var declaration?
		valSpec, ok := obj.Decl.(*ast.ValueSpec)
		if !ok {
			continue
		}

		// Does it have type specified? If so, this might be a global sensor
		// variable initialized later. We need to check whether it's an instana.Sensor
		if valSpec.Type != nil {
			if pkg, typ := extractSelectorPackageAndName(valSpec.Type); pkg == "instana" && typ == "Sensor" {
				return obj.Name
			}
		}

		// Inline initialization? Let's have a look if there is an instana.NewSensor*() in the values list
		for i, val := range valSpec.Values {
			if fnCall, ok := val.(*ast.CallExpr); ok {
				pkg, fnName := extractSelectorPackageAndName(fnCall.Fun)
				if pkg == "instana" && strings.HasPrefix(fnName, "NewSensor") {
					return valSpec.Names[i].Name
				}
			}
		}
	}

	return ""
}

var instanaGoTmpl = template.Must(template.New("instana.go").Parse(`// Code generated by {{ .BinName }}; DO NOT EDIT.

package {{ .Package }}

import instana "{{ .InstanaPackage }}"

var {{ .SensorName }} = instana.NewSensor("")
`))

type instanaGoTmplArgs struct {
	BinName        string
	Package        string
	InstanaPackage string
	SensorName     string
}

// InstrumentPackage creates instana.go file in the path and puts the sensor initialization
// code inside it. The returned value is the name of instana.Sensor instance available to
// the package
func AddInstanaSensor(pkgName, path string) (string, error) {
	const defaultSensorName = "__instanaSensor"

	filePath := filepath.Join(path, "instana.go")
	if _, err := os.Stat(filePath); !os.IsNotExist(err) {
		return "", fmt.Errorf("%s already exists", filePath)
	}

	fd, err := os.Create(filePath)
	if err != nil {
		return "", fmt.Errorf("failed to create %s: %w", filePath, err)
	}
	defer fd.Close()

	if err := instanaGoTmpl.Execute(fd, instanaGoTmplArgs{
		BinName:        os.Args[0],
		Package:        pkgName,
		InstanaPackage: SensorPackage,
		SensorName:     defaultSensorName,
	}); err != nil {
		defer os.Remove(filePath)

		return "", fmt.Errorf("failed to write %s: %w", filePath, err)
	}

	return defaultSensorName, nil
}
