// (c) Copyright IBM Corp. 2021
// (c) Copyright Instana Inc. 2020

package main

import (
	"bufio"
	"fmt"
	"go/ast"
	"html/template"
	"io"
	"regexp"
	"strings"

	"golang.org/x/tools/go/ast/astutil"
)

const instanaGoFileName = "instana_go_dependency.go"

var headLineRegexp = regexp.MustCompile(`^// Code generated by go-instana.*, DO NOT EDIT\.$`)

// LookupInstanaSensor searches for the first instana.Sensor instance available in the package
// scope and returns its name
func LookupInstanaSensor(pkg *ast.Package) string {
	if n := lookupInstanaSensor(pkg.Scope); n != "" {
		return n
	}

	for _, f := range pkg.Files {
		if !astutil.UsesImport(f, SensorPackage) {
			continue
		}

		if n := lookupInstanaSensor(f.Scope); n != "" {
			return n
		}
	}

	return ""
}

func lookupInstanaSensor(sc *ast.Scope) string {
	if sc == nil {
		return ""
	}

	for _, obj := range sc.Objects {
		if obj.Kind != ast.Var {
			continue
		}

		// Is this a var declaration?
		valSpec, ok := obj.Decl.(*ast.ValueSpec)
		if !ok {
			continue
		}

		// Does it have type specified? If so, this might be a global sensor
		// variable initialized later. We need to check whether it's an instana.Sensor
		if valSpec.Type != nil {
			if pkg, typ := extractSelectorPackageAndName(valSpec.Type); pkg == "instana" && typ == "Sensor" {
				return obj.Name
			}
		}

		// Inline initialization? Let's have a look if there is an instana.NewSensor*() in the values list
		for i, val := range valSpec.Values {
			if fnCall, ok := val.(*ast.CallExpr); ok {
				pkg, fnName := extractSelectorPackageAndName(fnCall.Fun)
				if pkg == "instana" && strings.HasPrefix(fnName, "NewSensor") {
					return valSpec.Names[i].Name
				}
			}
		}
	}

	return ""
}

var instanaGoTmpl = template.Must(template.New(instanaGoFileName).Parse(`// Code generated by go-instana, DO NOT EDIT.

package {{ .Package }}

import (
    {{if .AddSensor}}instana "{{ .InstanaPackage }}"{{ end }}
    {{ range .InstrumentationPackages }}
    _ "{{ . }}"{{ end }}
)
{{if .AddSensor}}
var {{ .SensorName }} = instana.NewSensor(""){{ end }}
`))

type instanaGoTmplArgs struct {
	Version                 string
	Package                 string
	InstanaPackage          string
	SensorName              string
	InstrumentationPackages []string
	AddSensor               bool
}

// WriteInstanaGoFile puts the sensor initialization
// code inside it to the `instanaGoFileName` file.
func WriteInstanaGoFile(wr io.Writer, pkgName string, addSensor bool, instrumentationPackages []string) (bool, error) {
	if !addSensor && len(instrumentationPackages) == 0 {
		return false, nil
	}

	if err := instanaGoTmpl.Execute(wr, instanaGoTmplArgs{
		Package:                 pkgName,
		InstanaPackage:          SensorPackage,
		SensorName:              "__instanaSensor",
		InstrumentationPackages: instrumentationPackages,
		AddSensor:               addSensor,
	}); err != nil {
		return false, fmt.Errorf("failed to write to file: %w", err)
	}

	return true, nil
}

func IsGeneratedByGoInstana(r io.Reader) bool {
	scanner := bufio.NewScanner(r)
	scanner.Split(bufio.ScanLines)

	for scanner.Scan() {
		line := scanner.Text()
		if len(line) == 0 {
			continue
		}

		return headLineRegexp.MatchString(line)
	}

	return false
}
